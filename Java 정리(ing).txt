변수, 연산자, 조건문, 반복문, 분기문

public static void main(String[] args){ }
// main method : 자바 실행 메서드(기능)
// 자바 프로그램을 실행시키기 위한 구문(기능)

System.out.print( );
System.out.println("~" + ~ );
System.out.printf("~ %@", ~ );
%d정수 %c문자 %s문자열 %b논리형 %f실수
%-6s -> 왼쪽 정렬
%.1f -> 반올림하여 0.@까지 나오게함

import java.util.Scanner;
// java.util 패키지 가져오기 Scanner 사용할때 씀

Scanner sc = new Scanner(System.in);
// new 연산자 : 메모리(heap)에 새로운 객체 생성
// System.in : 지정된 입력 장치(이클 기본값이 키보드)
// new Scanner(System.in) - 키보드 입력을 읽어들이는 Scanner 객체 생성
// 즉, sc라는 키보드 입력을 읽어들이는 Scanner 객체 생성
// 필드변수로 선언하는게 편함

sc.nextInt(); 
// 다음 입력된 정수 반환 // 정수가 아닌 값 입력 시 예외 발생
// System.out.print("정수 입력 : ");
// int i = sc.nextInt();
// System.out.println("i : " +i);
// 입력받는 변수도 같은형식이어야함
sc.next();
// 문자열 입력(띄어쓰기 x)
sc.nextDouble();
// 실수 입력
sc.next().charAt(0)
// 문자열.charAt(index) -> 문자열에서 index번째 문자 하나를 char 형태로 반환
//"남".charAt(0) -> '남' (char)

sc.nextLine();
// 버퍼에 남아있는 개행문자 제거 // 연속으로 입력값을 받을 수 있게 해준다

boolean	1byte
byte	1byte
short	2byte
int	4byte
long	8byte
float	4byte
double	8byte
char	2byte

// System.out.println(true == 1); // 에러
// Java에서는 자료형이 같지 않은 true 와 1은 비교가 안됨

// float fNum = 1.23; // 에러
// 실수형 값 저장 시 값 뒤에 f 를 안 넣으면 기본형인 double로 인식.
// float 변수에 double값을 저장할 수 없음

// char ch1 = 'AB' // 두 개 x
// char ch2 = "A" // " " 안됨

// float 와 double은 소수점 표현 자릿수가 2배

// String(문자열) - 기본 자료형에 포함 x
// 기본 자료형 o -> 변수에 직접 값 저장
// 기본 자료형 x -> 변수에 값의 위치(주소)를 저장
	==참조형 (주소를 저장하고 찾아감)

// 컴퓨터는 기본적으로 같은 자료형끼리만 연산 가능, 결과도 같은 자료형만 반환
// 값의 범위가 서로 다른 값들의 연산 시 "컴파일러"가 자동으로 
// 범위가 작은 값을 큰 값의 자료형으로 변환

int num1a = 12;
double num1b = 1.3;
System.out.ptinln(num1a + num1b); // 13.3

int num2a = 3;
int num2b = 2;
System.out.println(num2a / num2b); // 1
// 예상출력 1.5 but 둘 다 int형이므로 정수값만 출력하여 1이 나옴

// 값의 범위가 더 큰 자료형을 값의 범위가 더 작은 변수에 대입 불가
// 억지로 대입하려면 "강제 형변환" 이용
// 데이터 손실을 고려해야 함(손실을 이용해 원하는 값만 가져올 수도 있음)
int num1 = 290;
byte resylt1 = (byte)num1; // byte로 강제 형변환 //34

double num2 = 123.3456;
int result2 = (int)num2; // int 강제 형변환 // 123

// 난수 : Math.random() // 0.0 <= x < 1.0 // double

// 오버플로우 // 연산결과가 자료형 값의 범위를 초과한 경우

// 상수 // 값 변경 x 변수
// final 자료형 변수명 = 값; // 변수명은 대문자 + _ 형식으로 작성
final int NATIONAL_CODE = 82; // 다른 값 대입하려하면 오류발생

// method == 객체(클래스)가 가지고 있는 기능
public void test1(){ 
	System.out.println("test1() 메서드 호출");
}

// printf에서 %% == '%'로 출력됨

import ex.OperatorEx; // ex파일에 OperatorEx 가져오기
OperatorEx ex = new OperatorEx(); // OperatorEx 객체 생성
// 호출 시 ex.method1(); 형식으로 호출하면됨

switch(num){
case 1 : method1(); break; // 1 입력 시 method1() 호출
case 2 : method2(); break; // 2 입력 시 method2() 호출
default : System.out.println("잘못 입력 하셨습니다");
}

Math.min(a,b); // a,b 중 작은 값
Math.max(a,b); // a,b 중 큰 값

=================================================
/** 1부터 100사이의 정수 중 5의 배수의 합, 개수 구하기 (sum, count) */
public void method4() {
	int sum =0;
	int count =0;
	
	for(int i =1; i<=100; i++) {
		if(i % 5 == 0) {
			sum += i;
			count++;
		}
	}
	System.out.println("합계 : %d / 개수 : %d ",sum, count);
}
==================================================

// while(조건식)
// -> 조건식이 false가 될 때까지 반복
// while(true) 를 사용할경우 무조건 반복실행이므로 return; or brake; 로 나와줘야됨





























